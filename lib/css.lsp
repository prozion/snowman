(context 'Css)

; (Css ((. classname) (id idname) MAIN:@inline) ((width "250px") (height "100px")))
(define-macro (rule selector)
    (set 'buf nil)
    (dolist (_x selector)
        (when (symbol? _x) (extend buf (eval _x) " "))
        (when (string? _x) (extend buf _x " "))
        (when (list? _x)
            (case (string (term (_x 0)))
                ("." (extend buf "." (eval (_x 1)) " "))
                ("id" (extend buf "#" (eval (_x 1)) " ")))))
    (extend buf "{ ")
    (set '_args (args))
    (catch
        (begin 
            (when (null? (args)) (throw ""))
            (set '_buf nil)
            (if (symbol? (args 0))
                (set '_al (eval (args 0)))
                (set '_al (args)))
            (dolist (_x _al)
                (set '_buf2 "")
                (dolist (_y (rest _x))
                    (unless (null? (eval _y))
                        (extend _buf2 (eval _y) " ")))
                (unless (null? _buf2) (extend _buf (string (term (_x 0)) ":" _buf2))
                    (set '_buf (chop _buf))
                    (extend _buf "; ")))
            (throw _buf))
        'res)
    (extend buf res)
    (extend buf "}\n" )
    (extend MAIN:__css buf))

(define (path url)
    (string "url('" url "')")) 

(context MAIN)
